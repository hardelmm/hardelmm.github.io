<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>接口测试 on HardElm</title>
    <link>https://hardelmm.github.io/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</link>
    <description>Recent content in 接口测试 on HardElm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 07 Mar 2023 15:10:00 +0000</lastBuildDate><atom:link href="https://hardelmm.github.io/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>接口测试范围</title>
      <link>https://hardelmm.github.io/post/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E8%8C%83%E5%9B%B4/</link>
      <pubDate>Tue, 07 Mar 2023 15:10:00 +0000</pubDate>
      
      <guid>https://hardelmm.github.io/post/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E8%8C%83%E5%9B%B4/</guid>
      <description>本文简要概述接口测试范围以及部分注意事项 实际项目开发过程中，由于前后端结构分离，常通过前端进行输入限制，但若涉及未加密的接口，易留下安全性隐</description>
    </item>
    
    <item>
      <title>接口自动化测试框架模型（二）</title>
      <link>https://hardelmm.github.io/post/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%A8%A1%E5%9E%8B%E4%BA%8C/</link>
      <pubDate>Sat, 20 Aug 2022 22:16:46 +0000</pubDate>
      
      <guid>https://hardelmm.github.io/post/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%A8%A1%E5%9E%8B%E4%BA%8C/</guid>
      <description>前言：本文简要介绍针对实际业务场景下业务逻辑/流程的接口自动化实现方案，前文参阅《接口自动化测试框架模型（一）》</description>
    </item>
    
    <item>
      <title>接口自动化测试框架模型（一）</title>
      <link>https://hardelmm.github.io/post/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%A8%A1%E5%9E%8B%E4%B8%80/</link>
      <pubDate>Wed, 27 Apr 2022 15:37:00 +0000</pubDate>
      
      <guid>https://hardelmm.github.io/post/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%A8%A1%E5%9E%8B%E4%B8%80/</guid>
      <description>前言：本文简要介绍接口自动化测试框架实现方案，思路如下： 构建测试数据（用例） 测试用例执行 结果处理与校验 一.构造测试数据 直接使用json进行描</description>
    </item>
    
    <item>
      <title>接口自动化测试实例（一）</title>
      <link>https://hardelmm.github.io/post/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B-1/</link>
      <pubDate>Thu, 27 Jan 2022 20:22:36 +0800</pubDate>
      
      <guid>https://hardelmm.github.io/post/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B-1/</guid>
      <description>前言：本文简要介绍单接口（业务流）自动化测试框架实现方案，思路如下： 测试数据（用例）读取与处理 测试用例执行引擎 结果校验以及断言 测试结果处理与</description>
    </item>
    
    <item>
      <title>Jmeter&#43;beanshell</title>
      <link>https://hardelmm.github.io/post/jmeter&#43;beanshell/</link>
      <pubDate>Sun, 16 Jan 2022 21:46:59 +0800</pubDate>
      
      <guid>https://hardelmm.github.io/post/jmeter&#43;beanshell/</guid>
      <description>一.jmeter接口测试适用场景 jmeter横向对比其他接口测试工具，拥有UI界面，配置测试组件更易上手，适用语言基础薄弱的测试人员。 通过扩</description>
    </item>
    
    <item>
      <title>Unittest和pytest</title>
      <link>https://hardelmm.github.io/post/unittest%E5%92%8Cpytest/</link>
      <pubDate>Thu, 06 Jan 2022 21:56:13 +0800</pubDate>
      
      <guid>https://hardelmm.github.io/post/unittest%E5%92%8Cpytest/</guid>
      <description>一、用例编写规则 1.unittest提供了test cases、test suites、test fixtures、test runner相关的类,</description>
    </item>
    
    <item>
      <title>Postman&#43;js</title>
      <link>https://hardelmm.github.io/post/postman&#43;js/</link>
      <pubDate>Fri, 28 Jun 2019 20:03:21 +0800</pubDate>
      
      <guid>https://hardelmm.github.io/post/postman&#43;js/</guid>
      <description>一.postman适用场景 postman相比其他接口测试工具轻，但也因此功能较为局限，比如很难做流程控制，断言方式只能通过脚本实现 二.pos</description>
    </item>
    
    <item>
      <title>HTTP协议基础</title>
      <link>https://hardelmm.github.io/post/http%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 28 Jun 2019 00:03:21 +0800</pubDate>
      
      <guid>https://hardelmm.github.io/post/http%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/</guid>
      <description>一.HTTP协议概念 HTTP协议又叫做超文本传输协议（Hyper Text Transfer Protocol ），在做网络请求时，基本上时使用HTTP协议 HTTP使用统一资源标识符</description>
    </item>
    
  </channel>
</rss>
